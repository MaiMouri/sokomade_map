<div id="panel"></div>
<!-- Map appears here -->
<div id="map_2"></div>
<%= render 'shared/search' %>
  <script>
    let pos;
    let map;
    let bounds;
    let infoWindow;
    let currentInfoWindow;
    let service;
    let infoPane;
    let marker;
    let markers = [];
    let placesList;
    function initMap() {
      // Initialize variables
      bounds = new google.maps.LatLngBounds();
      infoWindow = new google.maps.InfoWindow;
      currentInfoWindow = infoWindow;
      /* TODO: Step 4A3: Add a generic sidebar */
      infoPane = document.getElementById('panel');
      // Default map (if needed )
      let map = new google.maps.Map(document.getElementById('map_2'), {
        center: { lat: -33.866, lng: 151.196 },
        // radius: 800,
        zoom: 15
      });
      // }
      // function getCurrent(params) {

      // Try HTML5 geolocation
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(position => {
          pos = {
            lat: position.coords.latitude,
            lng: position.coords.longitude
          };

          map = new google.maps.Map(document.getElementById('map_2'), {
            center: pos,
            radius: 800,
            zoom: 15
          });
          // bounds.extend(pos);

          infoWindow.setPosition(pos);
          infoWindow.setContent('Location found.');
          infoWindow.open(map);
          map.setCenter(pos);

          // Call Places Nearby Search on user's location
          // getNearbyPlaces(pos);
        }, () => {
          // Browser supports geolocation, but user has denied permission
          handleLocationError(true, infoWindow);
        });
      } else {
        // Browser doesn't support geolocation
        handleLocationError(false, infoWindow);
      }
    }

    function getPlaces() {
      document.getElementById("results").innerHTML = "";
      placesList = new Array();
      // Delete existing markers
      if (markers.length > 0) {
        deleteMakers(idx = null);
      }
      // test code
      let addressInput = document.getElementById("addressInput").value;

      //検索場所の位置情報を取得
      let geocoder = new google.maps.Geocoder();
      geocoder.geocode(
        { address: addressInput },
        function (results, status) {
          if (status == google.maps.GeocoderStatus.OK) {
            //取得した緯度・経度を使って周辺検索
            pos_2 = results[0].geometry.location
            getNearbyPlaces(pos_2)
            startNearbySearch(pos_2);
          }
          else {
            alert(addressInput + "：位置情報が取得できませんでした。");
          }
        });
    }

    function startNearbySearch(latLng) {
      document.getElementById("results").innerHTML = "Now Loading...";
      map = new google.maps.Map(
        document.getElementById("map_2"), {
        center: latLng,
        zoom: 15,
      });
    }

    // Handle a geolocation error
    function handleLocationError(browserHasGeolocation, infoWindow) {
      // Set default location to Sydney, Australia
      pos = { lat: -33.856, lng: 151.215 };
      map = new google.maps.Map(document.getElementById('map_2'), {
        center: pos,
        zoom: 15
      });

      // Display an InfoWindow at the map center
      infoWindow.setPosition(pos);
      infoWindow.setContent(browserHasGeolocation ?
        'Geolocation permissions denied. Using default location.' :
        'Error: Your browser doesn\'t support geolocation.');
      infoWindow.open(map);
      currentInfoWindow = infoWindow;

      // Call Places Nearby Search on the default location
      getNearbyPlaces(pos);
    }

    // Perform a Places Nearby Search Request
    function getNearbyPlaces(position) {
      let keywordInput = document.getElementById("keywordInput").value;

      let request = {
        location: position,
        radius: 800,
        // rankBy: google.maps.places.RankBy.DISTANCE,
        type: ['restaurant'],
        keyword: keywordInput
      };

      let map = new google.maps.Map(document.getElementById('map_2'), {
        center: position,
        zoom: 15
      });
      service = new google.maps.places.PlacesService(map);
      service.nearbySearch(request, nearbyCallback);
      // service.nearbySearch(request, displayResults);
    }

    // Handle the results (up to 20) of the Nearby Search
    function nearbyCallback(results, status, pagination) {
      if (status == google.maps.places.PlacesServiceStatus.OK) {
        createMarkers(results);
        displayResults(results, status, pagination);
      }
    }

    // Set markers at the location of each place result
    function createMarkers(places) {
      places.forEach(place => {
        let marker = new google.maps.Marker({
          position: place.geometry.location,
          map: map,
          title: place.name
        });

        markers.push(marker);
        console.log(markers);
        /* TODO: Step 4B: Add click listeners to the markers */
        // Add click listener to each marker
        google.maps.event.addListener(marker, 'click', () => {
          let request = {
            placeId: place.place_id,
            fields: ['name', 'formatted_address', 'geometry', 'rating',
              'website', 'photos']
          };

          /* Only fetch the details of a place when the user clicks on a marker.
           * If we fetch the details for all place results as soon as we get
           * the search response, we will hit API rate limits. */
          service.getDetails(request, (placeResult, status) => {
            showDetails(placeResult, marker, status)
          });
        });

        // Adjust the map bounds to include the location of this marker
        bounds.extend(place.geometry.location);
      });
      /* Once all the markers have been placed, adjust the bounds of the map to
       * show all the markers within the visible area. */
      // [NOTE]This adjusts the map so it displays all the markers
      map.fitBounds(bounds);
    }

    /* TODO: Step 4C: Show place details in an info window */
    // Builds an InfoWindow to display details above the marker
    function showDetails(placeResult, marker, status) {
      if (status == google.maps.places.PlacesServiceStatus.OK) {
        let placeInfowindow = new google.maps.InfoWindow();
        let rating = "None";
        if (placeResult.rating) rating = placeResult.rating;
        placeInfowindow.setContent('<div><strong>' + placeResult.name +
          '</strong><br>' + 'Rating: ' + rating + '</div>');
        placeInfowindow.open(marker.map, marker);
        currentInfoWindow.close();
        currentInfoWindow = placeInfowindow;
        showPanel(placeResult);
      } else {
        console.log('showDetails failed: ' + status);
      }
    }

    /* TODO: Step 4D: Load place details in a sidebar */
    // Displays place details in a sidebar
    function showPanel(placeResult) {
      // If infoPane is already open, close it
      if (infoPane.classList.contains("open")) {
        infoPane.classList.remove("open");
        infoPane.classList.remove("hidden");
      }

      // Clear the previous details
      while (infoPane.lastChild) {
        infoPane.removeChild(infoPane.lastChild);
      }

      /* TODO: Step 4E: Display a Place Photo with the Place Details */
      // Add the primary photo, if there is one
      if (placeResult.photos) {
        let firstPhoto = placeResult.photos[0];
        let photo = document.createElement('img');
        photo.classList.add('hero');
        photo.src = firstPhoto.getUrl();
        infoPane.appendChild(photo);
      }

      // Add place details with text formatting
      let name = document.createElement('h1');
      name.classList.add('place');
      name.textContent = placeResult.name;
      infoPane.appendChild(name);
      if (placeResult.rating) {
        let rating = document.createElement('p');
        rating.classList.add('details');
        rating.textContent = `Rating: ${placeResult.rating} \u272e`;
        infoPane.appendChild(rating);
      }
      let address = document.createElement('p');
      address.classList.add('details');
      address.textContent = placeResult.formatted_address;
      infoPane.appendChild(address);

      if (placeResult.website) {
        let websitePara = document.createElement('p');
        let websiteLink = document.createElement('a');
        let websiteUrl = document.createTextNode(placeResult.website);
        websiteLink.appendChild(websiteUrl);
        websiteLink.title = placeResult.website;
        websiteLink.href = placeResult.website;
        websitePara.appendChild(websiteLink);
        infoPane.appendChild(websitePara);
      }

      let buttonClose = document.createElement('button');
      buttonClose.classList.add('button_close');
      buttonClose.textContent = 'close';
      infoPane.appendChild(buttonClose);

      // Open the infoPane
      infoPane.classList.add("open");

      buttonClose.addEventListener("click", () => {
        infoPane.classList.add("hidden");
      })
    }

    function displayResults(results, status, pagination) {
      if (status == google.maps.places.PlacesServiceStatus.OK) {
        //検索結果をplacesList配列に連結
        placesList = placesList.concat(results);
        if (pagination.hasNextPage) {
          setTimeout(pagination.nextPage(), 1000);
        } else {
          let resultHTML = "<ol>";
          for (let i = 0; i < placesList.length; i++) {
            place = placesList[i];

            //ratingがないのものは「---」に表示変更
            let rating = place.rating;
            if (rating == undefined) rating = "---";
            let content = "【" + rating + "】 " + place.name;

            resultHTML += "<li>";
            resultHTML += "<a href=\"javascript: void(0);\"";
            resultHTML += " onclick=\"addMarker(";
            resultHTML += "'" + place.name + "',";
            resultHTML += "'" + place.vicinity + "',";
            resultHTML += "'" + place.place_id + "',";
            resultHTML += place.geometry.location.lat() + ",";
            resultHTML += place.geometry.location.lng() + ")\">";
            resultHTML += content;
            resultHTML += "</a>";
            resultHTML += "</li>";
          }

          resultHTML += "</ol>";

          //結果表示
          document.getElementById("results").innerHTML = resultHTML;
        }

      } else {
        //エラー表示
        let results = document.getElementById("results");
        if (status == google.maps.places.PlacesServiceStatus.ZERO_RESULTS) {
          results.innerHTML = "検索結果が0件です。";
        } else if (status == google.maps.places.PlacesServiceStatus.ERROR) {
          results.innerHTML = "サーバ接続に失敗しました。";
        } else if (status == google.maps.places.PlacesServiceStatus.INVALID_REQUEST) {
          results.innerHTML = "リクエストが無効でした。";
        } else if (status == google.maps.places.PlacesServiceStatus.OVER_QUERY_LIMIT) {
          results.innerHTML = "リクエストの利用制限回数を超えました。";
        } else if (status == google.maps.places.PlacesServiceStatus.REQUEST_DENIED) {
          results.innerHTML = "サービスが使えない状態でした。";
        } else if (status == google.maps.places.PlacesServiceStatus.UNKNOWN_ERROR) {
          results.innerHTML = "原因不明のエラーが発生しました。";
        }

      }
    }

    // Dispaly the details from the results list
    function addMarker(name, vicinity, place_id, lat, lng) {
      let url = "http://maps.google.com/mapfiles/ms/icons/";
      color = 'blue';
      url += color + "-dot.png";

      let request = {
        placeId: place_id,
        fields: ['name', 'formatted_address', 'geometry', 'rating',
          'website', 'photos']
      };

      /* Only fetch the details of a place when the user clicks on a marker.
        * If we fetch the details for all place results as soon as we get
        * the search response, we will hit API rate limits. */
      service.getDetails(request, (placeResult, status) => {
        console.log(request);
        showDetails(placeResult, marker, status)
      });
      let marker = new google.maps.Marker({
        map: map,
        position: { lat: lat, lng: lng },
        icon: {
          url: url,
          //scaledSize: new google.maps.Size(38, 38)
        }
      });
    }
    //マーカーを削除する
    function deleteMakers(idx = null) {
      if (idx == null) {
        //生成済マーカーを順次すべて削除する
        for (var i = 0; i < markers.length; i++) {
          markers[i].setMap(null);
        }
        markers = [];	//参照を開放
      } else {
        //生成済マーカーからID指定されたマーカーを削除
        for (var i = 0; i < markers.length; i++) {
          if (idx.indexOf(i) >= 0) {
            markers[i].setMap(null);
          }
        }
      }
    }
  </script>

  <script async defer
    src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['SECRET_KEY'] %>&libraries=places&callback=initMap">
    </script>
